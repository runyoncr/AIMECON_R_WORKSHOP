# Activity: Generation Parameter Testing {#sec-act-parameter}

This activity is designed to allow you to get hands-on experience playing around with model generation parameters.
To do so, we need to modify the initial `call_claude` function to incorporate specifying the generation parameters.

The parameters that we will be testing are `temperature`,`top_p`, and `top_k`. 
(`max_tokens` is also included, but we won't be using that in our testing.) 
Note that for our particular model (Claude Sonnet 4.5), you cannot specify `temperature` and `top_p` at the same time.

## `claude_plus` function {#sec-claude-plus}

You can download the following function by clicking the copy button (looks like a clipboard) in the code chunk displayed below.
Alternatively, you can click the icon below:

<a href="downloads/claude_plus.R" download style="display: inline-block; padding: 10px 20px; background-color: #4A90E2; color: black; text-decoration: none; border-radius: 5px;">
  ðŸ“¥ Download `claude_plus`
</a>

```{r claude_plus}

library(httr)
library(jsonlite)

claude_plus <- function(prompt,
                        model = "claude-sonnet-4-5-20250929",
                        temperature = NULL,
                        top_p = NULL,
                        max_tokens = 1024) {
  
  # Check if both temperature and top_p are supplied
  if (!is.null(temperature) && !is.null(top_p)) {
    warning("Both temperature and top_p arguments are supplied. The Anthropic API does not support using both simultaneously. Only temperature will be used.")
  }
  
  # Get API key from environment
  # You will need to change this to your own API key after workshop
  api_key <- Sys.getenv("ANTHROPIC_API_KEY")
  # Convert text prompt to required message format
  messages <- list(list(role = "user", content = prompt))
  
  # Build request body
  request_body <- list(
    model = model,
    messages = messages,
    max_tokens = max_tokens # Required; will be an argument in other functions
  )
  
  # Add temperature if provided (takes precedence over top_p)
  if (!is.null(temperature)) {
    request_body$temperature <- temperature
  } else if (!is.null(top_p)) {
    # Only add top_p if temperature is not provided
    request_body$top_p <- top_p
  }
  
  # Set up headers
  headers <- add_headers(
    "x-api-key" = api_key,
    "anthropic-version" = "2023-06-01",
    "content-type" = "application/json"
  )
  
  # Make the API request
  response <- POST(
    url = "https://api.anthropic.com/v1/messages",
    headers,
    body = toJSON(request_body, auto_unbox = TRUE)
  )
  
  # Check if request was successful
  if (http_status(response)$category != "Success") {
    stop(paste("API request failed:", http_status(response)$message, 
               "\nDetails:", content(response, "text", encoding = "UTF-8")))
  }
  
  # Parse response and extract text content
  result <- fromJSON(content(response, "text", encoding = "UTF-8"))
  return(as.character(result$content)[2])
}

```

Understanding how these generation parameters change model output is more obvious when you can see the different outputs from the model using the same parameters.
I've made the `claude_param_test` function to help with this - it includes a `n_reps` argument (default = 5, max of 20) that replicates the call several times.

## `claude_param_test` function {#sec-claude-param-test}

You can download the following function by clicking the copy button (looks like a clipboard) in the code chunk displayed below.
Alternatively, you can click the icon below:

<a href="downloads/claude_param_test.R" download style="display: inline-block; padding: 10px 20px; background-color: #4A90E2; color: black; text-decoration: none; border-radius: 5px;">
  ðŸ“¥ Download `claude_param_test`
</a>

```{r claude_param_test}

claude_param_test <- function(prompt,
                              temperature = NULL,
                              top_p = NULL,
                              top_k = NULL,
                              max_tokens = 1024,
                              n_reps = 5) {
  
  # Check if n_reps is within allowed range
  if (n_reps > 20) {
    warning("n_reps exceeds maximum allowed value of 20. Setting n_reps to 20.")
    n_reps <- 20
  }
  
  if (n_reps < 5) {
    warning("n_reps is below minimum value of 5. Setting n_reps to 5.")
    n_reps <- 5
  }
  
  # Initialize results dataframe
  results <- data.frame(
    rep_n = integer(),
    temp = numeric(),
    top_p = numeric(),
    top_k = integer(),
    output = character(),
    stringsAsFactors = FALSE
  )
  
  # Loop through n_reps
  for (i in 1:n_reps) {
    # Call claude_plus
    output <- claude_plus(
      prompt = prompt,
      temperature = temperature,
      top_p = top_p,
      top_k = top_k,
      max_tokens = max_tokens
    )
    
    # Add to results
    results <- rbind(results, data.frame(
      rep_n = i,
      temp = ifelse(is.null(temperature), NA, temperature),
      top_p = ifelse(is.null(top_p), NA, top_p),
      top_k = ifelse(is.null(top_k), NA, top_k),
      output = output,
      stringsAsFactors = FALSE
    ))
    
    # Sleep between calls (except after last call)
    if (i < n_reps) {
      Sys.sleep(0.2)
    }
  }
  
  return(results)
}

```

## Quick Reference Generation Parameter Table

| Generation Parameter | Description                                                                                                      | Range                                |
|----------------------|------------------------------------------------------------------------------------------------------------------|--------------------------------------|
| `temperature`        | Affects creativity by changing the probability distribution when choosing the next token                         | $0 \leq \texttt{temperature} \leq 1$ |
| `top_p`              | Uses nucleus sampling to limit token choices by selecting options that make up the `top_p` proportion of options | $0 < \texttt{top\_p} \leq 1$         |
| `top_k`              | Samples from only the top `k` most probable tokens                                                               | $\texttt{top\_k} \geq 1$             |


## Task 1: High `temperature`

For each of the following tasks, you're welcome to use my prompt or update the syntax with your own.

```{r high temp, eval = FALSE}

high_pizza <- claude_param_test("In 15 words or fewer, tell me why pizza is so good.",
                                temperature = 1,
                                n_reps = 10)
save(high_pizza, file = "./data/high_pizza.R")

```
```{r high temp result}

library(knitr)
load("data/high_pizza.R")
  kable(high_pizza)

```

## Task 2: Low `temperature`

```{r low temp, eval = FALSE}

low_pizza <- claude_param_test("In 15 words or fewer, tell me why pizza is so good.",
                                temperature = 0,
                                n_reps = 10)
save(low_pizza, file = "./data/low_pizza.R")

```
```{r low temp result}

load("data/low_pizza.R")
kable(low_pizza)

```


*Note* although the results from this experiment show that the output was identical across the 10 calls, this was by chance; setting the temperature to 0 **_does not guarantee_** the exact same outputs will be obtained across different calls.

## Task 3: Low `temperature`, longer output

I repeated the above task, but increased `max_token = 2048` and use the prompt of "Write a short essay about the importance of educational measurement." I was shocked to see that all the essays were still identical!

```{r low edm, eval = FALSE}

edmeasure_low <- claude_param_test("Write a short essay about the importance of educational measurement.",
                                   temperature = 0,
                                   n_reps = 20,
                                   max_tokens = 2048)
save(edmeasure_low, file = "./data/edmeasure_low.R")

```
```{r low edm result}

load("data/edmeasure_low.R")

```

```{r, echo=FALSE}
essay1 <- gsub("## ", "", edmeasure_low$output[1])
essay2 <- gsub("## ", "", edmeasure_low$output[2])
essay3 <- gsub("## ", "", edmeasure_low$output[3])
essay4 <- gsub("## ", "", edmeasure_low$output[4])
essay5 <- gsub("## ", "", edmeasure_low$output[5])
```

::: {.panel-tabset}

## Essay 1
```{r, echo=FALSE, results='asis'}
cat(essay1)
```

## Essay 2
```{r, echo=FALSE, results='asis'}
cat(essay2)
```

## Essay 3
```{r, echo=FALSE, results='asis'}
cat(essay3)
```

## Essay 4
```{r, echo=FALSE, results='asis'}
cat(essay4)
```

## Essay 5
```{r, echo=FALSE, results='asis'}
cat(essay5)
```

:::

## Task 4: High `top_p`

```{r high p, eval = FALSE}

highp_pizza <- claude_param_test("In 15 words or fewer, tell me why pizza is so good.",
                                 top_p = .90,
                                 n_reps = 10)
save(highp_pizza, file = "./data/highp_pizza.R")

```
```{r high p result}

load("data/highp_pizza.R")
kable(highp_pizza)

```


## Task 5: Low `top_p`

```{r low p, eval = FALSE}

lowp_pizza <- claude_param_test("In 15 words or fewer, tell me why pizza is so good.",
                                top_p = .10,
                                n_reps = 10)
save(lowp_pizza, file = "./data/lowp_pizza.R")

```
```{r low p result}

load("data/lowp_pizza.R")
kable(lowp_pizza)

```
